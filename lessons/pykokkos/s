#!/bin/bash

readonly IMAGE="wlruys/nuwest"
readonly EC=255
readonly TRACE=0


# ----------
# Functions.

function s_has_cuda() {
        hash nvcc

        # NOTE: If you want to disable CUDA, uncomment the following:
        # return 1
}

function s_cuda_arch() {
        # Return CUDA arch name.

        hash nvidia-smi || \
                { echo "warn: does not have nvidia-smi"; return $EC; }

        local arch=$(nvidia-smi -q | \
                             grep 'Product Architecture' | \
                             cut -f2 -d':' | \
                             sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' | tr [:upper:] [:lower:])
        echo "${arch}"
}

function s_tag() {
        # Return the docker tag to use depending on the env.

        if s_has_cuda; then
                echo "$(s_cuda_arch)"
        else
                echo "cpu"
        fi
}

function s_assume() {
        # Check the environment before any run.

        [ "${TRACE}" -eq 0 ] && echo "trace: $FUNCNAME"

        # Has to have docker.
        hash docker >/dev/null 2>&1 || \
                { echo "err: docker is not available"; return $EC; }

        # If CUDA, needs one of the supported arch.
        if s_has_cuda; then
                local arch=$(s_cuda_arch)
                [ "${arch}" != "volta" -a "${arch}" != "turing" -a "${arch}" != "ampere" ] && \
                        { echo "err: unsupproted CUDA arch ${arch}."; return $EC; }
        fi

        return 0
}

function s_set_up() {
        # Set up the environment.
        local tag="${1}"

        [ "${TRACE}" -eq 0 ] && echo "trace: $FUNCNAME with tag: ${tag}"

        [ -z "${tag}" ] && \
                { echo "err: tag has to be given"; return $EC; }

        docker pull "${IMAGE}:${tag}" >/dev/null || \
                { echo "err: could not pull the docker image"; return $EC; }
        docker pull "${IMAGE}:${tag}-multi" >/dev/null || \
                { echo "err: could not pull the docker image"; return $EC; }
}

function s_exe() {
        # Run an example on the given path.
        local tag="${1}"
        local path="${2}"

        [ "${TRACE}" -eq 0 ] && echo "trace: $FUNCNAME with tag: ${tag} and path: ${path}"

        [ -z "${tag}" ] && \
                { echo "err: tag has to be given"; return $EC; }
        shift
        
        [ -z "${path}" ] && \
                { echo "help: ${0} scripts/mini_boltzmann_cpu.py -N 100000 -s 10"; return $EC; }

        if [[ "${path}" = *multigpu* ]]; then
                tag="${tag}-multi"
        fi

        if s_has_cuda; then
                [ "${TRACE}" -eq 0 ] && echo "trace: docker cuda run with tag: ${tag}"
                docker run \
                       --runtime=nvidia \
                       --gpus all \
                       --volume $(pwd):/app \
                       --workdir /app \
                       --user demo:$(id -g) \
                       "${IMAGE}:${tag}" \
                       python \
                       "$@" || \
                        { echo "could not run"; return $EC; }
        else
                [ "${TRACE}" -eq 0 ] && echo "trace: docker cpu run with tag: ${tag}"
                docker run \
                       -e OPENMP_NUM_THREADS=1 \
                       --volume $(pwd):/app \
                       --workdir /app \
                       --user demo:$(id -g) \
                       "${IMAGE}:${tag}" \
                       python \
                       "$@" || \
                        { echo "could not run"; return $EC; }
        fi

        #find -type d -name "__pycache__" | xargs rm -rf
        #rm -r pk_cpp
}

function s_clean() {
        # Removes images.

        docker image rm -f wlruys/nuwest:ampere >/dev/null 2>&1
        docker image rm -f wlruys/nuwest:cpu >/dev/null 2>&1
}

function main() {
        s_assume || return $EC

        [ "${TRACE}" -eq 0 ] && echo "trace: $FUNCNAME"

        local tag=$(s_tag)
        s_set_up "${tag}" || return $EC
        s_exe "${tag}" "$@" || return $EC
}

main "$@"
